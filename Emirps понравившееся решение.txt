import java.util.Arrays;
import java.util.stream.IntStream;

class Emirps {
    
    public static long[] findEmirp(long n) {
       return new long[]{IntStream.range(9, (int) n).filter(i -> isPrime(i)).filter(i -> isPrime(reverseInt(i)) && i != reverseInt(i)).distinct().count(),
                IntStream.range(9, (int) n).filter(i -> isPrime(i)).filter(i -> isPrime(reverseInt(i)) && i != reverseInt(i)).distinct().max().orElse(0),
                IntStream.range(9, (int) n).filter(i -> isPrime(i)).filter(i -> isPrime(reverseInt(i)) && i != reverseInt(i)).distinct().sum()};
    }

    public static int reverseInt(int num) {
        int lastDigit;
        int reversedNum = 0;
         while (num != 0) {
            reversedNum = reversedNum * 10;
            lastDigit = num % 10;
            reversedNum = reversedNum + lastDigit;
            num = num / 10;
        }
        return reversedNum;
    }

    public static boolean isPrime(int number) {
        for (int i = 2; i < (int) Math.sqrt(number) + 1; i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}